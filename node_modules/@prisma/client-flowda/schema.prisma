// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/@prisma/client-flowda"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// generator dbml {
//   provider = "npx prisma-dbml-generator"
// }

generator zod {
  provider                  = "node ../../node_modules/zod-prisma-types/dist/bin.js" // npx zod-prisma-types 如果无法生成可以改成 node ../../node_modules/zod-prisma-types/dist/bin.js 会有错误堆栈
  createModelTypes          = true
  createInputTypes          = false
  addInputTypeValidation    = false
  addIncludeType            = true
  addSelectType             = false
  coerceDate                = false
  createRelationValuesTypes = true
  output                    = "../../../libs/prisma-flowda/src/zod"
  prismaClientPath          = "@prisma/client-flowda"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // 用的不是很熟
  // relationMode = "prisma"
}

/// @schema.display_name 租户信息
/// @schema.display_column name
model Tenant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 租户名称
  name String @unique()

  /// @schema.model_name User
  users User[]

  menu Menu?

  /// @schema.model_name DynamicTableDef
  dynamicTableDefs       DynamicTableDef[]
  /// @schema.model_name DynamicTableDefColumn
  dynamicTableDefColumns DynamicTableDefColumn[]
  /// @schema.model_name DynamicTableData
  dynamicTableData       DynamicTableData[]
}

/// @schema.display_name 节点和表单关联关系
model TaskFormRelation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  taskDefinitionKey String @unique
  formKey           String
}

/// @schema.display_name 表和查询条件的关系
model TableFilter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  path       String
  name       String
  filterJSON String
}

// todo: 一个用户可能属于多个租户

/// @schema.display_name 员工
/// @schema.display_column username
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  username           String
  hashedPassword     String?
  hashedRefreshToken String?

  profile UserProfile?

  /// @schema.title 微信 unionid
  unionid String?

  /// @schema.title 邮箱
  email String? @unique()

  /// @schema.title 头像
  image String?

  /// @schema.reference Tenant
  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

// user -> user profile 1-1
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations
// 主要关注点：选择那一侧是可选的
model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  fullName String

  tenantId Int
}

/// @schema.display_name 审计日志
model Audits {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  /// @schema.title 关联 id
  auditId      Int
  /// @schema.title 审计类型(关联 schema)
  auditType    String
  /// @schema.title 用户 id
  userId       String
  /// @schema.title 用户名
  username     String?
  /// @schema.title 动作(e.g. update)
  action       String
  /// @schema.title 变化
  auditChanges String  @db.Text
  /// @schema.title 版本
  version      Int
}

/// @schema.display_name 动态表定义
/// @schema.display_column name
model DynamicTableDef {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 表英文名
  name String

  /// @schema.title 表扩展
  extendedSchema Json?

  /// @schema.model_name DynamicTableDefColumn
  dynamicTableDefColumns DynamicTableDefColumn[]

  /// @schema.model_name DynamicTableData
  dynamicTableData DynamicTableData[]

  /// @schema.reference Tenant
  tenantId Int    @default(0)
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

/// @schema.display_name 动态表列定义
/// @schema.display_column name
model DynamicTableDefColumn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.reference DynamicTableDef
  dynamicTableDefId Int
  dynamicTableDef   DynamicTableDef @relation(fields: [dynamicTableDefId], references: [id])

  /// @schema.title 列名
  name String
  /// @schema.title 类型
  type DynamicColumnType @default(string)

  /// @schema.title 列扩展
  extendedSchema Json?

  /// @schema.reference Tenant
  tenantId Int    @default(0)
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

enum DynamicColumnType {
  string
  textarea
  integer
  boolean
  datetime
  tag
  reference
}

/// @schema.display_name 动态表数据
model DynamicTableData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.reference DynamicTableDef
  dynamicTableDefId Int
  dynamicTableDef   DynamicTableDef @relation(fields: [dynamicTableDefId], references: [id])

  // todo: 关于 json 索引 https://planetscale.com/blog/indexing-json-in-mysql

  /// @schema.title 数据
  data Json

  /// @schema.reference Tenant
  tenantId Int    @default(0)
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

/// @schema.display_name 菜单
/// @schema.display_column name
model Menu {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 菜单树
  treeData Json

  /// @schema.reference Tenant
  tenantId Int    @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}
